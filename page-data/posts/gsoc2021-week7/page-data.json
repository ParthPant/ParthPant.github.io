{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/gsoc2021-week7","result":{"data":{"markdownRemark":{"id":"1e9ca34c-2cdd-5e34-bc08-194db7e9aef9","html":"<p><img src=\"/0fd8119c475116ed1f982e06120ea265/recursive.gif\" alt=\"Image\"></p>\n<h2 id=\"fixing-minor-bugs\" style=\"position:relative;\"><a href=\"#fixing-minor-bugs\" aria-label=\"fixing minor bugs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixing Minor Bugs</h2>\n<p>Most of this week, I spent my time fixing minor bugs and improving code quality of Distribution Snapping.\nOne of the most noticeable bugs that somehow crept in was during bidirectional distribution snapping.\nIf you were moving an selection of multiple objects and trying to “equidistant snap” in both X and Y directions,\nthe snapping would happen relative to the overall bounding box of the selection and not the object that was actually\nbeing moved. Fortunately this was an easy-fix!</p>\n<p><img src=\"/b6fdef47b0cada4cf5156099bd26de2a/bidirectional.gif\" alt=\"Image\"></p>\n<p>Distribution and Alignment snapping will now be turned ON by default when you open inkscape. Also, instead of having a\nseparate “Intelligent Snapping” heading in the preferences, the setting to disable snap distances are now included in\nan overall heading called “Snap”</p>\n<p>Also replaced raw pointers with smart-pointers wherever possible, this makes code cleaner and less error-prone. It’s also\na nice modern C++ paradigm to adopt into the codebase.</p>\n<p>But one of the major but not very visible bugs that needed fixing was caused due to the poor implementation of <code class=\"language-text\">_addBBoxforIntersectionBBoxes</code>.\nI should have known this earlier, but given the idiot I am, I forgot how <code class=\"language-text\">std::vector::iterator</code>s behave.</p>\n<h2 id=\"iterator-invalidation\" style=\"position:relative;\"><a href=\"#iterator-invalidation\" aria-label=\"iterator invalidation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterator Invalidation</h2>\n<p>In case we have overlapping objects, it is useful that apart from probing them individually,\nwe also consider them to be a single object. This can be achieved with a simple hack.</p>\n<p>This involves, looking at each of the 4 lists, and add to them, the overall bounding boxes\nof objects that overlap. It is important that these new bounding boxes are inserted\nin such a way that the overall list remains sorted. The function <code class=\"language-text\">_addBBoxforIntersectingBBoxes</code>\ntakes care of this.</p>\n<p><img src=\"/9d98c2207dd8ebbe95f4128bb3cccd0b/overlap.svg\" alt=\"Image\"></p>\n<p>The problem arises, when you insert an element into a <code class=\"language-text\">std::vector</code>. <code class=\"language-text\">vector</code>s are supposed to be contiguous storage,\nit’s what makes them so fast. When you insert and element in between somewhere in a vector, you invalidate all of the\niterators that come after that position. Not only that, incase in the process of insertion, your <code class=\"language-text\">vector</code> needs to resize\nitself, it will invalidate all of the iterators before and after that position. So, in essence any iterator that you had stored\nearlier will be useless. This causes <code class=\"language-text\">unaligned memory tcache chunk</code> errors. These are unpredictable and can happen at anytime,\nespecially when you have to insert a lot of elements.</p>\n<p>So, now that you know what the problem was, it is apparant that things crashed randomly. Interestingly though, if I was testing with\nrelatively small number of elements, there were no errors, but if I hade about a 1000 elements in the view port, it seemed like hell\nbroke loose!</p>\n<h2 id=\"fix\" style=\"position:relative;\"><a href=\"#fix\" aria-label=\"fix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fix</h2>\n<p>The easiest fix would be to not use <code class=\"language-text\">std::vector</code> but to use a <code class=\"language-text\">std::list</code> instead. Lists are not contiguous and it’s iterators do not\ninvalidate so easily. But because Lists are not contiguous, they are also slower than <code class=\"language-text\">std::vectors</code>. So to fix the issue and still be able to\nuse vectors, I needed to make some changes to the algorithm.</p>\n<ul>\n<li>first calculate the insertion positions of the new bounding boxes and store this data somewhere; I used <code class=\"language-text\">std::pair</code></li>\n<li>resize the vector to appropriate memory size.</li>\n<li>add new elements to the vector and use relative positions instead of absolute pointers.</li>\n</ul>\n<p>here is the code for the function that is currently in the build.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">void Inkscape::DistributionSnapper::_addBBoxForIntersectingBoxes(std::vector&lt;Geom::Rect&gt; *vec, Direction dir) const {\n    if (vec-&gt;size() &lt; 1) {\n        return;\n    }\n\n    int count = 0;\n    std::vector&lt;std::pair&lt;int, Geom::Rect&gt;&gt; insertPositions;\n\n    for (auto it = vec-&gt;begin(); it != vec-&gt;end(); it++, count++) {\n        Geom::Rect comb(*it);\n        int num = 0;\n        int insertPos = count;\n\n        while (std::next(it) != vec-&gt;end() &amp;&amp; it-&gt;intersects(*std::next(it))) {\n            comb.unionWith(*std::next(it));\n\n            if (dir == Direction::RIGHT &amp;&amp; comb.midpoint().x() &gt; it-&gt;midpoint().x()) {\n                ++insertPos;\n            } else if (dir == Direction::LEFT &amp;&amp; comb.midpoint().x() &lt; it-&gt;midpoint().x()){\n                ++insertPos;\n            } else if (dir == Direction::UP &amp;&amp; comb.midpoint().y() &gt; it-&gt;midpoint().y()){\n                ++insertPos;\n            } else if (dir == Direction::DOWN &amp;&amp; comb.midpoint().y() &lt; it-&gt;midpoint().y()){\n                ++insertPos;\n            }\n\n            ++it;\n            ++num;\n            ++count;\n        }\n\n        if (num &gt; 0) {\n            insertPositions.emplace_back(insertPos, comb);\n        }\n    }\n    \n    if (insertPositions.size() != 0) {\n        // TODO: Does this improve performance?\n        vec-&gt;reserve(vec-&gt;size() + insertPositions.size());\n\n        count = 0;\n        for (auto pair : insertPositions) {\n            vec-&gt;insert(vec-&gt;begin() + pair.first + count, pair.second);\n            ++count;\n        }\n    }\n}</code></pre></div>","fields":{"slug":"/posts/gsoc2021-week7","tagSlugs":["/tag/g-so-c-21/","/tag/inkscape/"]},"frontmatter":{"date":"2021-07-07T06:31+00:00","description":"Week 7 progress on my GSoC Project at Inkscape","tags":["GSoC'21","Inkscape"],"title":"Week 7 - OnCanvas Alignment Guides","socialImage":{"publicURL":"/static/c7b626445e86bd4d36091b2a07161dac/snap.png"}}}},"pageContext":{"slug":"/posts/gsoc2021-week7"}},"staticQueryHashes":["251939775","401334301","825871152"]}